import React, { useEffect, useMemo, useRef, useState } from 'react';import { io } from 'socket.io-client';import { Search, LogOut, Plus, FileText, Edit, Trash2, X, Lock, RefreshCcw, Printer } from 'lucide-react';import { api } from './api';const SOCKET_URL = import.meta.env.VITE_SOCKET_URL || 'http://localhost:4000';const estadoColor = (estado) => ({ 'Alta': 'bg-green-100 text-green-800', 'En seguimiento': 'bg-blue-100 text-blue-800', 'Pendiente': 'bg-yellow-100 text-yellow-800' }[estado] || 'bg-gray-100 text-gray-800');export default function App() { const [currentPage, setCurrentPage] = useState('login'); const [currentUser, setCurrentUser] = useState(null); const [pacientes, setPacientes] = useState([]); const [loading, setLoading] = useState(false); const [searchTerm, setSearchTerm] = useState(''); const [statusFilter, setStatusFilter] = useState('Todos los estados'); const [showAddModal, setShowAddModal] = useState(false); const [newPatient, setNewPatient] = useState({ nombre:'', fechaNac:'', edad:0, diagnostico:'', estado:'Pendiente', centroEscolar:'', centroSalud:'', derivacion:'', protocoloEscolar:'No', pruebas:[], notas:[] }); const [showEditModal, setShowEditModal] = useState(false); const [editingPatient, setEditingPatient] = useState(null); const socketRef = useRef(null); const heartbeatRef = useRef(null); const usuariosDemo = [{ id:1, username:'admin', fullName:'Administrador', role:'Administrador', active:true },{ id:2, username:'usuario1', fullName:'Usuario 1', role:'Usuario', active:true }]; useEffect(() => { if (currentPage === 'dashboard') { socketRef.current = io(SOCKET_URL, { autoConnect: true }); socketRef.current.on('connect', () => { console.log('socket connected', socketRef.current.id); socketRef.current.emit('patients:request'); }); socketRef.current.on('patients:response', (data) => setPacientes(data)); socketRef.current.on('patients:updated', (patients) => setPacientes(patients.map(p=>({ ...p, lockedBy: p.lockedBy || null })))); socketRef.current.on('lock:updated', async (locks) => { const fresh = await api.getPatients(); setPacientes(fresh); }); socketRef.current.on('lock:granted', ({ caso, lock }) => { console.log('lock granted', caso); }); socketRef.current.on('lock:denied', ({ caso, lock }) => { alert(`No se puede bloquear caso ${caso}. Bloqueado por ${lock.user.username}`); }); socketRef.current.on('lock:error', (e) => { console.error('lock:error', e); }); loadPatients(); } return () => { if (socketRef.current) { socketRef.current.disconnect(); socketRef.current = null; } clearInterval(heartbeatRef.current); }; }, [currentPage]); const loadPatients = async () => { setLoading(true); try { const data = await api.getPatients(); setPacientes(data); } catch (err) { console.error(err); alert(err.message || 'Error cargando pacientes'); } finally { setLoading(false); } }; const [loginForm, setLoginForm] = useState({ username:'', password:'' }); const handleLogin = (e) => { e?.preventDefault(); const u = usuariosDemo.find(x=>x.username===loginForm.username) || { id: Date.now(), username: loginForm.username || 'usuario', fullName: loginForm.username || 'Usuario', role: 'Usuario', active: true }; setCurrentUser(u); setCurrentPage('dashboard'); }; const filtered = useMemo(() => pacientes.filter(p=> { const matches = (searchTerm==='' ) || p.nombre?.toLowerCase().includes(searchTerm.toLowerCase()) || p.caso?.includes(searchTerm) || (p.diagnostico||'').toLowerCase().includes(searchTerm.toLowerCase()); const matchesStatus = statusFilter === 'Todos los estados' || p.estado === statusFilter; return matches && matchesStatus; }), [pacientes, searchTerm, statusFilter]); const requestLock = (paciente) => { if (!socketRef.current) return alert('Socket no conectado'); socketRef.current.emit('lock:request', { caso: paciente.caso, user: currentUser }); socketRef.current.once('lock:granted', ({ caso, lock }) => { if (heartbeatRef.current) clearInterval(heartbeatRef.current); heartbeatRef.current = setInterval(() => { socketRef.current.emit('heartbeat', { caso, user: currentUser }); }, 1000 * 60); setEditingPatient({ ...paciente }); setShowEditModal(true); }); socketRef.current.once('lock:denied', ({ caso, lock }) => { alert(`No se puede bloquear. Bloqueado por ${lock.user.username}`); api.getPatients().then(setPacientes).catch(()=>{}); }); }; const releaseLock = (paciente) => { if (!socketRef.current) return; socketRef.current.emit('lock:release', { caso: paciente.caso, user: currentUser }); }; const closeEditModal = async () => { if (heartbeatRef.current) clearInterval(heartbeatRef.current); if (editingPatient) releaseLock(editingPatient); setShowEditModal(false); setEditingPatient(null); await loadPatients(); }; const savePatient = async () => { try { await api.updatePatient(editingPatient.caso, editingPatient, currentUser.id); closeEditModal(); } catch (err) { alert(err.message || 'Error guardando'); } }; const createPatient = async () => { try { await api.createPatient(newPatient); setShowAddModal(false); setNewPatient({ nombre:'', fechaNac:'', edad:0, diagnostico:'', estado:'Pendiente', centroEscolar:'', centroSalud:'', derivacion:'', protocoloEscolar:'No', pruebas:[], notas:[] }); await loadPatients(); } catch (err) { alert(err.message || 'Error creando'); } }; const deletePatient = async (p) => { if (!confirm(`Eliminar paciente ${p.nombre}?`)) return; try { await api.deletePatient(p.caso); await loadPatients(); } catch (err) { alert(err.message || 'Error eliminando'); } }; if (currentPage === 'login') { return (<div className="min-h-screen bg-gradient-to-br from-purple-600 via-purple-700 to-purple-800 flex items-center justify-center"><div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md"><div className="text-center mb-8"><h1 className="text-3xl font-bold text-purple-600 mb-2">EADISOC</h1><p className="text-gray-600">Sistema de Gestión de Pacientes (Realtime)</p></div><form onSubmit={handleLogin} className="space-y-6"><div><label className="block text-sm font-medium text-gray-700 mb-2">Usuario</label><input className="w-full px-4 py-3 border border-gray-300 rounded-lg" value={loginForm.username} onChange={(e)=>setLoginForm({...loginForm, username:e.target.value})} /></div><div><label className="block text-sm font-medium text-gray-700 mb-2">Contraseña</label><input type="password" className="w-full px-4 py-3 border border-gray-300 rounded-lg" value={loginForm.password} onChange={(e)=>setLoginForm({...loginForm, password:e.target.value})} /></div><button type="submit" className="w-full bg-purple-600 text-white py-3 rounded-lg">Iniciar Sesión</button></form></div></div>); } return (<div className="min-h-screen bg-gray-50"><header className="bg-white shadow-sm border-b"><div className="max-w-7xl mx-auto px-4 py-4 flex justify-between items-center"><h1 className="text-2xl font-bold text-purple-600">Gestor de Pacientes EADISOC (Realtime)</h1><div className="flex items-center space-x-3"><div className="px-3 py-2 bg-purple-600 text-white rounded-full">{currentUser.username}</div><button onClick={()=>{ setCurrentPage('login'); setCurrentUser(null); }} className="bg-red-500 text-white px-3 py-2 rounded">Salir</button></div></div></header><main className="max-w-7xl mx-auto px-4 py-8"><div className="flex justify-between items-center mb-4"><div className="relative max-w-lg w-full"><Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" /><input value={searchTerm} onChange={(e)=>setSearchTerm(e.target.value)} placeholder="Buscar..." className="w-full pl-10 py-2 border rounded" /></div><div className="ml-4 flex items-center space-x-2"><select value={statusFilter} onChange={(e)=>setStatusFilter(e.target.value)} className="border rounded px-2 py-1"><option>Todos los estados</option><option>Alta</option><option>En seguimiento</option><option>Pendiente</option></select><button onClick={loadPatients} className="px-3 py-2 border rounded"><RefreshCcw /></button><button onClick={()=>setShowAddModal(true)} className="px-3 py-2 bg-gray-800 text-white rounded"><Plus /></button></div></div><div className="bg-white rounded shadow overflow-hidden"><table className="min-w-full divide-y divide-gray-200"><thead className="bg-gray-50"><tr><th className="px-4 py-2">Caso</th><th className="px-4 py-2">Nombre</th><th className="px-4 py-2">Diagnóstico</th><th className="px-4 py-2">Estado</th><th className="px-4 py-2">Bloqueo</th><th className="px-4 py-2">Acciones</th></tr></thead><tbody>{filtered.map(p=>(<tr key={p.caso} className="hover:bg-gray-50"><td className="px-4 py-2">{p.caso}</td><td className="px-4 py-2">{p.nombre}</td><td className="px-4 py-2">{p.diagnostico}</td><td className="px-4 py-2"><span className={`px-2 py-1 rounded ${estadoColor(p.estado)}`}>{p.estado}</span></td><td className="px-4 py-2">{p.lockedBy ? <span className="px-2 py-1 rounded bg-red-100 text-red-800"><Lock className="inline-block mr-1" />{p.lockedBy.username}</span> : <span className="px-2 py-1 rounded bg-green-100 text-green-800">Libre</span>}</td><td className="px-4 py-2"><div className="flex space-x-2"><button onClick={()=>{ setShowEditModal(false); setEditingPatient(p); }} className="px-2 py-1 border rounded"><FileText /></button><button onClick={()=>requestLock(p)} className="px-2 py-1 border rounded" disabled={p.lockedBy && p.lockedBy.username !== currentUser.username}><Edit /></button><button onClick={()=>deletePatient(p)} className="px-2 py-1 border rounded text-red-600"><Trash2 /></button></div></td></tr>))}</tbody></table>{loading && <div className="p-4 text-sm text-gray-500">Cargando...</div>}</div></main>{showAddModal && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center"><div className="bg-white p-6 rounded w-full max-w-2xl"><div className="flex justify-between items-center mb-4"><h3 className="text-lg font-medium">Añadir paciente</h3><button onClick={()=>setShowAddModal(false)}><X /></button></div><div className="space-y-3"><input className="w-full px-3 py-2 border rounded" placeholder="Nombre completo" value={newPatient.nombre} onChange={(e)=>setNewPatient({...newPatient, nombre:e.target.value})} /><div className="flex gap-2"><input className="w-1/2 px-3 py-2 border rounded" placeholder="Fecha Nac." value={newPatient.fechaNac} onChange={(e)=>setNewPatient({...newPatient, fechaNac:e.target.value})} /><input className="w-1/2 px-3 py-2 border rounded" placeholder="Edad" type="number" value={newPatient.edad} onChange={(e)=>setNewPatient({...newPatient, edad:parseInt(e.target.value||'0')})} /></div></div><div className="flex justify-end gap-2 mt-4"><button onClick={()=>setShowAddModal(false)} className="px-3 py-2 border rounded">Cancelar</button><button onClick={createPatient} className="px-3 py-2 bg-purple-600 text-white rounded">Crear</button></div></div></div>)}{showEditModal && editingPatient && (<div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"><div className="bg-white p-6 rounded w-full max-w-3xl max-h-[90vh] overflow-y-auto"><div className="flex justify-between items-center mb-4"><h3 className="text-lg font-medium">Editar paciente {editingPatient.caso}</h3><button onClick={closeEditModal}><X /></button></div><div className="space-y-3"><input className="w-full px-3 py-2 border rounded" value={editingPatient.nombre} onChange={(e)=>setEditingPatient({...editingPatient, nombre:e.target.value})} /></div><div className="flex justify-between gap-2 mt-4"><button onClick={closeEditModal} className="px-3 py-2 border rounded">Cancelar</button><button onClick={savePatient} className="px-3 py-2 bg-green-600 text-white rounded">Guardar</button></div></div></div>)} </div>); }